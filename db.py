{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cc9c4049-3d3c-4537-8976-60674c700de6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import relevant libraries\n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f0ca823b-48d4-4fca-992a-4fb5f5fa731b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Transaction_ID</th>\n",
       "      <th>Country</th>\n",
       "      <th>Product</th>\n",
       "      <th>Import_Export</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>Value</th>\n",
       "      <th>Date</th>\n",
       "      <th>Category</th>\n",
       "      <th>Port</th>\n",
       "      <th>Customs_Code</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Shipping_Method</th>\n",
       "      <th>Supplier</th>\n",
       "      <th>Customer</th>\n",
       "      <th>Invoice_Number</th>\n",
       "      <th>Payment_Terms</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>e3e70682-c209-4cac-a29f-6fbed82c07cd</td>\n",
       "      <td>Colombia</td>\n",
       "      <td>describe</td>\n",
       "      <td>Export</td>\n",
       "      <td>1979</td>\n",
       "      <td>9506.57</td>\n",
       "      <td>07-12-2023</td>\n",
       "      <td>Machinery</td>\n",
       "      <td>Robertbury</td>\n",
       "      <td>620537</td>\n",
       "      <td>4248.65</td>\n",
       "      <td>Air</td>\n",
       "      <td>Garrison, Hubbard and Hendricks</td>\n",
       "      <td>Seth Hall</td>\n",
       "      <td>21000294</td>\n",
       "      <td>Cash on Delivery</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>f728b4fa-4248-4e3a-8a5d-2f346baa9455</td>\n",
       "      <td>Chile</td>\n",
       "      <td>president</td>\n",
       "      <td>Export</td>\n",
       "      <td>5763</td>\n",
       "      <td>7100.91</td>\n",
       "      <td>04-04-2023</td>\n",
       "      <td>Clothing</td>\n",
       "      <td>Shahport</td>\n",
       "      <td>927600</td>\n",
       "      <td>4340.81</td>\n",
       "      <td>Air</td>\n",
       "      <td>Webb-Mack</td>\n",
       "      <td>Kimberly Ryan</td>\n",
       "      <td>88738432</td>\n",
       "      <td>Prepaid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>eb1167b3-67a9-4378-bc65-c1e582e2e662</td>\n",
       "      <td>Turkey</td>\n",
       "      <td>far</td>\n",
       "      <td>Import</td>\n",
       "      <td>5740</td>\n",
       "      <td>2450.34</td>\n",
       "      <td>21-08-2024</td>\n",
       "      <td>Electronics</td>\n",
       "      <td>South Joshuatown</td>\n",
       "      <td>299258</td>\n",
       "      <td>4538.41</td>\n",
       "      <td>Air</td>\n",
       "      <td>Mendez, Jones and Johnson</td>\n",
       "      <td>Ryan Silva</td>\n",
       "      <td>89922099</td>\n",
       "      <td>Prepaid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>f7c1bd87-4da5-4709-9471-3d60c8a70639</td>\n",
       "      <td>Christmas Island</td>\n",
       "      <td>agency</td>\n",
       "      <td>Export</td>\n",
       "      <td>2592</td>\n",
       "      <td>7226.42</td>\n",
       "      <td>09-05-2022</td>\n",
       "      <td>Furniture</td>\n",
       "      <td>Adamfort</td>\n",
       "      <td>996084</td>\n",
       "      <td>4886.14</td>\n",
       "      <td>Air</td>\n",
       "      <td>Schroeder-Smith</td>\n",
       "      <td>Jacob Gray</td>\n",
       "      <td>63216265</td>\n",
       "      <td>Net 60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>e443df78-9558-467f-9ba9-1faf7a024204</td>\n",
       "      <td>Finland</td>\n",
       "      <td>policy</td>\n",
       "      <td>Export</td>\n",
       "      <td>2622</td>\n",
       "      <td>2817.29</td>\n",
       "      <td>03-04-2023</td>\n",
       "      <td>Electronics</td>\n",
       "      <td>Juliebury</td>\n",
       "      <td>555981</td>\n",
       "      <td>4406.74</td>\n",
       "      <td>Air</td>\n",
       "      <td>Zimmerman LLC</td>\n",
       "      <td>Amy Stephens</td>\n",
       "      <td>94600248</td>\n",
       "      <td>Cash on Delivery</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14995</th>\n",
       "      <td>48df15a8-0823-4964-8c16-eddf2756f382</td>\n",
       "      <td>Marshall Islands</td>\n",
       "      <td>not</td>\n",
       "      <td>Export</td>\n",
       "      <td>2860</td>\n",
       "      <td>2055.19</td>\n",
       "      <td>09-07-2024</td>\n",
       "      <td>Furniture</td>\n",
       "      <td>South Karenfort</td>\n",
       "      <td>393463</td>\n",
       "      <td>4120.35</td>\n",
       "      <td>Land</td>\n",
       "      <td>Smith-Lewis</td>\n",
       "      <td>Darlene Davis</td>\n",
       "      <td>29605073</td>\n",
       "      <td>Net 60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14996</th>\n",
       "      <td>31106617-94a6-4646-a001-5e7bd45abc26</td>\n",
       "      <td>Bermuda</td>\n",
       "      <td>air</td>\n",
       "      <td>Export</td>\n",
       "      <td>2443</td>\n",
       "      <td>6407.06</td>\n",
       "      <td>18-06-2024</td>\n",
       "      <td>Furniture</td>\n",
       "      <td>Jeffreyside</td>\n",
       "      <td>484143</td>\n",
       "      <td>1832.71</td>\n",
       "      <td>Air</td>\n",
       "      <td>Jones Group</td>\n",
       "      <td>John Ramos</td>\n",
       "      <td>39044695</td>\n",
       "      <td>Cash on Delivery</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14997</th>\n",
       "      <td>ee485839-fbde-4ced-af18-d98f5e863081</td>\n",
       "      <td>Tanzania</td>\n",
       "      <td>show</td>\n",
       "      <td>Export</td>\n",
       "      <td>1702</td>\n",
       "      <td>9918.29</td>\n",
       "      <td>30-04-2020</td>\n",
       "      <td>Toys</td>\n",
       "      <td>North Meganborough</td>\n",
       "      <td>354935</td>\n",
       "      <td>4203.52</td>\n",
       "      <td>Land</td>\n",
       "      <td>Barnes-Romero</td>\n",
       "      <td>Rebecca Phelps</td>\n",
       "      <td>78492040</td>\n",
       "      <td>Net 30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14998</th>\n",
       "      <td>5acd54aa-ec8c-4055-be8b-a447861a471c</td>\n",
       "      <td>Tuvalu</td>\n",
       "      <td>TV</td>\n",
       "      <td>Export</td>\n",
       "      <td>8108</td>\n",
       "      <td>9288.57</td>\n",
       "      <td>29-04-2021</td>\n",
       "      <td>Clothing</td>\n",
       "      <td>Villafurt</td>\n",
       "      <td>234296</td>\n",
       "      <td>1597.72</td>\n",
       "      <td>Land</td>\n",
       "      <td>Smith, Allison and Bennett</td>\n",
       "      <td>Scott Yates</td>\n",
       "      <td>20799602</td>\n",
       "      <td>Cash on Delivery</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14999</th>\n",
       "      <td>5cc039d0-a052-41fd-bfbb-c9f60c4565ac</td>\n",
       "      <td>North Macedonia</td>\n",
       "      <td>year</td>\n",
       "      <td>Import</td>\n",
       "      <td>5635</td>\n",
       "      <td>561.33</td>\n",
       "      <td>25-12-2019</td>\n",
       "      <td>Clothing</td>\n",
       "      <td>West Gary</td>\n",
       "      <td>766709</td>\n",
       "      <td>2913.82</td>\n",
       "      <td>Air</td>\n",
       "      <td>Fleming-Miles</td>\n",
       "      <td>Steven Young</td>\n",
       "      <td>79237293</td>\n",
       "      <td>Net 30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>15000 rows Ã— 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                             Transaction_ID           Country    Product  \\\n",
       "0      e3e70682-c209-4cac-a29f-6fbed82c07cd          Colombia   describe   \n",
       "1      f728b4fa-4248-4e3a-8a5d-2f346baa9455             Chile  president   \n",
       "2      eb1167b3-67a9-4378-bc65-c1e582e2e662            Turkey        far   \n",
       "3      f7c1bd87-4da5-4709-9471-3d60c8a70639  Christmas Island     agency   \n",
       "4      e443df78-9558-467f-9ba9-1faf7a024204           Finland     policy   \n",
       "...                                     ...               ...        ...   \n",
       "14995  48df15a8-0823-4964-8c16-eddf2756f382  Marshall Islands        not   \n",
       "14996  31106617-94a6-4646-a001-5e7bd45abc26           Bermuda        air   \n",
       "14997  ee485839-fbde-4ced-af18-d98f5e863081          Tanzania       show   \n",
       "14998  5acd54aa-ec8c-4055-be8b-a447861a471c            Tuvalu         TV   \n",
       "14999  5cc039d0-a052-41fd-bfbb-c9f60c4565ac   North Macedonia       year   \n",
       "\n",
       "      Import_Export  Quantity    Value        Date     Category  \\\n",
       "0            Export      1979  9506.57  07-12-2023    Machinery   \n",
       "1            Export      5763  7100.91  04-04-2023     Clothing   \n",
       "2            Import      5740  2450.34  21-08-2024  Electronics   \n",
       "3            Export      2592  7226.42  09-05-2022    Furniture   \n",
       "4            Export      2622  2817.29  03-04-2023  Electronics   \n",
       "...             ...       ...      ...         ...          ...   \n",
       "14995        Export      2860  2055.19  09-07-2024    Furniture   \n",
       "14996        Export      2443  6407.06  18-06-2024    Furniture   \n",
       "14997        Export      1702  9918.29  30-04-2020         Toys   \n",
       "14998        Export      8108  9288.57  29-04-2021     Clothing   \n",
       "14999        Import      5635   561.33  25-12-2019     Clothing   \n",
       "\n",
       "                     Port  Customs_Code   Weight Shipping_Method  \\\n",
       "0              Robertbury        620537  4248.65             Air   \n",
       "1                Shahport        927600  4340.81             Air   \n",
       "2        South Joshuatown        299258  4538.41             Air   \n",
       "3                Adamfort        996084  4886.14             Air   \n",
       "4               Juliebury        555981  4406.74             Air   \n",
       "...                   ...           ...      ...             ...   \n",
       "14995     South Karenfort        393463  4120.35            Land   \n",
       "14996         Jeffreyside        484143  1832.71             Air   \n",
       "14997  North Meganborough        354935  4203.52            Land   \n",
       "14998           Villafurt        234296  1597.72            Land   \n",
       "14999           West Gary        766709  2913.82             Air   \n",
       "\n",
       "                              Supplier        Customer  Invoice_Number  \\\n",
       "0      Garrison, Hubbard and Hendricks       Seth Hall        21000294   \n",
       "1                            Webb-Mack   Kimberly Ryan        88738432   \n",
       "2            Mendez, Jones and Johnson      Ryan Silva        89922099   \n",
       "3                      Schroeder-Smith      Jacob Gray        63216265   \n",
       "4                        Zimmerman LLC    Amy Stephens        94600248   \n",
       "...                                ...             ...             ...   \n",
       "14995                      Smith-Lewis   Darlene Davis        29605073   \n",
       "14996                      Jones Group      John Ramos        39044695   \n",
       "14997                    Barnes-Romero  Rebecca Phelps        78492040   \n",
       "14998       Smith, Allison and Bennett     Scott Yates        20799602   \n",
       "14999                    Fleming-Miles    Steven Young        79237293   \n",
       "\n",
       "          Payment_Terms  \n",
       "0      Cash on Delivery  \n",
       "1               Prepaid  \n",
       "2               Prepaid  \n",
       "3                Net 60  \n",
       "4      Cash on Delivery  \n",
       "...                 ...  \n",
       "14995            Net 60  \n",
       "14996  Cash on Delivery  \n",
       "14997            Net 30  \n",
       "14998  Cash on Delivery  \n",
       "14999            Net 30  \n",
       "\n",
       "[15000 rows x 16 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the Test Data.\n",
    "ht=pd.read_csv(r\"C:\\FORE\\Term 1\\Imports_Exports_Dataset.csv\")\n",
    "ht"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "950d3e87-3e42-4bb8-87db-aa0ec21949cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(15000, 16)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ht.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "481da0a9-0a7a-4360-a4f6-75018ffb4029",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Transaction_ID</th>\n",
       "      <th>Country</th>\n",
       "      <th>Product</th>\n",
       "      <th>Import_Export</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>Value</th>\n",
       "      <th>Date</th>\n",
       "      <th>Category</th>\n",
       "      <th>Port</th>\n",
       "      <th>Customs_Code</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Shipping_Method</th>\n",
       "      <th>Supplier</th>\n",
       "      <th>Customer</th>\n",
       "      <th>Invoice_Number</th>\n",
       "      <th>Payment_Terms</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>708</th>\n",
       "      <td>439ddd74-67af-46d9-af04-ef81b5481bf2</td>\n",
       "      <td>Jersey</td>\n",
       "      <td>then</td>\n",
       "      <td>Import</td>\n",
       "      <td>1755</td>\n",
       "      <td>7031.60</td>\n",
       "      <td>23-06-2021</td>\n",
       "      <td>Toys</td>\n",
       "      <td>North Kenneth</td>\n",
       "      <td>368605</td>\n",
       "      <td>3178.59</td>\n",
       "      <td>Sea</td>\n",
       "      <td>Thompson LLC</td>\n",
       "      <td>Ashley Herrera</td>\n",
       "      <td>46772582</td>\n",
       "      <td>Net 60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6208</th>\n",
       "      <td>4bc8754f-28af-4080-8f40-0449d986ee5f</td>\n",
       "      <td>Belize</td>\n",
       "      <td>about</td>\n",
       "      <td>Export</td>\n",
       "      <td>8917</td>\n",
       "      <td>2112.46</td>\n",
       "      <td>28-09-2022</td>\n",
       "      <td>Furniture</td>\n",
       "      <td>Port Nicoleport</td>\n",
       "      <td>152047</td>\n",
       "      <td>3438.64</td>\n",
       "      <td>Air</td>\n",
       "      <td>Clarke LLC</td>\n",
       "      <td>Darius Price</td>\n",
       "      <td>35375538</td>\n",
       "      <td>Net 30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14618</th>\n",
       "      <td>c682238e-e006-4107-90d1-f50934b5cb58</td>\n",
       "      <td>Vietnam</td>\n",
       "      <td>consider</td>\n",
       "      <td>Import</td>\n",
       "      <td>6306</td>\n",
       "      <td>8424.55</td>\n",
       "      <td>19-10-2023</td>\n",
       "      <td>Furniture</td>\n",
       "      <td>Walkerville</td>\n",
       "      <td>275391</td>\n",
       "      <td>3253.30</td>\n",
       "      <td>Air</td>\n",
       "      <td>Livingston-Rose</td>\n",
       "      <td>Jennifer Torres</td>\n",
       "      <td>8212653</td>\n",
       "      <td>Prepaid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12643</th>\n",
       "      <td>83cfb784-acbc-4987-995a-371b3d33c7a5</td>\n",
       "      <td>Barbados</td>\n",
       "      <td>successful</td>\n",
       "      <td>Export</td>\n",
       "      <td>7615</td>\n",
       "      <td>2639.24</td>\n",
       "      <td>13-02-2021</td>\n",
       "      <td>Electronics</td>\n",
       "      <td>South Jeremy</td>\n",
       "      <td>807319</td>\n",
       "      <td>4836.54</td>\n",
       "      <td>Sea</td>\n",
       "      <td>Mullins-Holmes</td>\n",
       "      <td>James Lopez</td>\n",
       "      <td>68860920</td>\n",
       "      <td>Prepaid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1073</th>\n",
       "      <td>ab6fc9e7-be72-4448-91b5-ab77d09e1abb</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>sound</td>\n",
       "      <td>Import</td>\n",
       "      <td>3663</td>\n",
       "      <td>6330.61</td>\n",
       "      <td>25-06-2023</td>\n",
       "      <td>Clothing</td>\n",
       "      <td>Weaverborough</td>\n",
       "      <td>402750</td>\n",
       "      <td>1152.38</td>\n",
       "      <td>Air</td>\n",
       "      <td>Hensley-Garza</td>\n",
       "      <td>Robert Robinson</td>\n",
       "      <td>59351741</td>\n",
       "      <td>Net 60</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             Transaction_ID     Country     Product  \\\n",
       "708    439ddd74-67af-46d9-af04-ef81b5481bf2      Jersey        then   \n",
       "6208   4bc8754f-28af-4080-8f40-0449d986ee5f      Belize       about   \n",
       "14618  c682238e-e006-4107-90d1-f50934b5cb58     Vietnam    consider   \n",
       "12643  83cfb784-acbc-4987-995a-371b3d33c7a5    Barbados  successful   \n",
       "1073   ab6fc9e7-be72-4448-91b5-ab77d09e1abb  Madagascar       sound   \n",
       "\n",
       "      Import_Export  Quantity    Value        Date     Category  \\\n",
       "708          Import      1755  7031.60  23-06-2021         Toys   \n",
       "6208         Export      8917  2112.46  28-09-2022    Furniture   \n",
       "14618        Import      6306  8424.55  19-10-2023    Furniture   \n",
       "12643        Export      7615  2639.24  13-02-2021  Electronics   \n",
       "1073         Import      3663  6330.61  25-06-2023     Clothing   \n",
       "\n",
       "                  Port  Customs_Code   Weight Shipping_Method  \\\n",
       "708      North Kenneth        368605  3178.59             Sea   \n",
       "6208   Port Nicoleport        152047  3438.64             Air   \n",
       "14618      Walkerville        275391  3253.30             Air   \n",
       "12643     South Jeremy        807319  4836.54             Sea   \n",
       "1073     Weaverborough        402750  1152.38             Air   \n",
       "\n",
       "              Supplier         Customer  Invoice_Number Payment_Terms  \n",
       "708       Thompson LLC   Ashley Herrera        46772582        Net 60  \n",
       "6208        Clarke LLC     Darius Price        35375538        Net 30  \n",
       "14618  Livingston-Rose  Jennifer Torres         8212653       Prepaid  \n",
       "12643   Mullins-Holmes      James Lopez        68860920       Prepaid  \n",
       "1073     Hensley-Garza  Robert Robinson        59351741        Net 60  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create an Unique Sample of 2001 Records using Student Roll Number as Random State.\n",
    "hts=ht.sample(n=3001, random_state=55052)\n",
    "hts.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3a121c0c-b918-4790-ae21-83c41b7b4361",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3001, 16)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hts.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "94ce94c3-0bf4-4a4b-b3da-94c0a55b2d19",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Transaction_ID</th>\n",
       "      <th>Country</th>\n",
       "      <th>Product</th>\n",
       "      <th>Import_Export</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>Value</th>\n",
       "      <th>Date</th>\n",
       "      <th>Category</th>\n",
       "      <th>Port</th>\n",
       "      <th>Customs_Code</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Shipping_Method</th>\n",
       "      <th>Supplier</th>\n",
       "      <th>Customer</th>\n",
       "      <th>Invoice_Number</th>\n",
       "      <th>Payment_Terms</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>708</th>\n",
       "      <td>439ddd74-67af-46d9-af04-ef81b5481bf2</td>\n",
       "      <td>Jersey</td>\n",
       "      <td>then</td>\n",
       "      <td>Import</td>\n",
       "      <td>1755</td>\n",
       "      <td>7031.60</td>\n",
       "      <td>23-06-2021</td>\n",
       "      <td>Toys</td>\n",
       "      <td>North Kenneth</td>\n",
       "      <td>368605</td>\n",
       "      <td>3178.59</td>\n",
       "      <td>Sea</td>\n",
       "      <td>Thompson LLC</td>\n",
       "      <td>Ashley Herrera</td>\n",
       "      <td>46772582</td>\n",
       "      <td>Net 60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6208</th>\n",
       "      <td>4bc8754f-28af-4080-8f40-0449d986ee5f</td>\n",
       "      <td>Belize</td>\n",
       "      <td>about</td>\n",
       "      <td>Export</td>\n",
       "      <td>8917</td>\n",
       "      <td>2112.46</td>\n",
       "      <td>28-09-2022</td>\n",
       "      <td>Furniture</td>\n",
       "      <td>Port Nicoleport</td>\n",
       "      <td>152047</td>\n",
       "      <td>3438.64</td>\n",
       "      <td>Air</td>\n",
       "      <td>Clarke LLC</td>\n",
       "      <td>Darius Price</td>\n",
       "      <td>35375538</td>\n",
       "      <td>Net 30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14618</th>\n",
       "      <td>c682238e-e006-4107-90d1-f50934b5cb58</td>\n",
       "      <td>Vietnam</td>\n",
       "      <td>consider</td>\n",
       "      <td>Import</td>\n",
       "      <td>6306</td>\n",
       "      <td>8424.55</td>\n",
       "      <td>19-10-2023</td>\n",
       "      <td>Furniture</td>\n",
       "      <td>Walkerville</td>\n",
       "      <td>275391</td>\n",
       "      <td>3253.30</td>\n",
       "      <td>Air</td>\n",
       "      <td>Livingston-Rose</td>\n",
       "      <td>Jennifer Torres</td>\n",
       "      <td>8212653</td>\n",
       "      <td>Prepaid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12643</th>\n",
       "      <td>83cfb784-acbc-4987-995a-371b3d33c7a5</td>\n",
       "      <td>Barbados</td>\n",
       "      <td>successful</td>\n",
       "      <td>Export</td>\n",
       "      <td>7615</td>\n",
       "      <td>2639.24</td>\n",
       "      <td>13-02-2021</td>\n",
       "      <td>Electronics</td>\n",
       "      <td>South Jeremy</td>\n",
       "      <td>807319</td>\n",
       "      <td>4836.54</td>\n",
       "      <td>Sea</td>\n",
       "      <td>Mullins-Holmes</td>\n",
       "      <td>James Lopez</td>\n",
       "      <td>68860920</td>\n",
       "      <td>Prepaid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1073</th>\n",
       "      <td>ab6fc9e7-be72-4448-91b5-ab77d09e1abb</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>sound</td>\n",
       "      <td>Import</td>\n",
       "      <td>3663</td>\n",
       "      <td>6330.61</td>\n",
       "      <td>25-06-2023</td>\n",
       "      <td>Clothing</td>\n",
       "      <td>Weaverborough</td>\n",
       "      <td>402750</td>\n",
       "      <td>1152.38</td>\n",
       "      <td>Air</td>\n",
       "      <td>Hensley-Garza</td>\n",
       "      <td>Robert Robinson</td>\n",
       "      <td>59351741</td>\n",
       "      <td>Net 60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12391</th>\n",
       "      <td>cce97f19-00cb-4e28-876f-4810a18fca7a</td>\n",
       "      <td>Dominica</td>\n",
       "      <td>nothing</td>\n",
       "      <td>Export</td>\n",
       "      <td>5364</td>\n",
       "      <td>8083.96</td>\n",
       "      <td>15-10-2021</td>\n",
       "      <td>Electronics</td>\n",
       "      <td>Fredland</td>\n",
       "      <td>850161</td>\n",
       "      <td>4240.11</td>\n",
       "      <td>Sea</td>\n",
       "      <td>Barron-Christensen</td>\n",
       "      <td>Shelia Hayden</td>\n",
       "      <td>95649856</td>\n",
       "      <td>Net 30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1856</th>\n",
       "      <td>00ac317a-dd82-4b3e-a868-5bdd02c81d11</td>\n",
       "      <td>Jordan</td>\n",
       "      <td>brother</td>\n",
       "      <td>Export</td>\n",
       "      <td>8688</td>\n",
       "      <td>1551.08</td>\n",
       "      <td>15-06-2022</td>\n",
       "      <td>Furniture</td>\n",
       "      <td>Cunninghamside</td>\n",
       "      <td>450005</td>\n",
       "      <td>2399.42</td>\n",
       "      <td>Sea</td>\n",
       "      <td>Lloyd-Scott</td>\n",
       "      <td>Alexandra Best</td>\n",
       "      <td>75251941</td>\n",
       "      <td>Net 30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10170</th>\n",
       "      <td>c34d6790-83f1-4c2c-a48b-9fcb9157d48c</td>\n",
       "      <td>Fiji</td>\n",
       "      <td>light</td>\n",
       "      <td>Import</td>\n",
       "      <td>7452</td>\n",
       "      <td>5362.06</td>\n",
       "      <td>11-04-2020</td>\n",
       "      <td>Machinery</td>\n",
       "      <td>Port Shaneside</td>\n",
       "      <td>503174</td>\n",
       "      <td>4601.47</td>\n",
       "      <td>Sea</td>\n",
       "      <td>Cooper Inc</td>\n",
       "      <td>Roger Santiago</td>\n",
       "      <td>45053376</td>\n",
       "      <td>Net 30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>579</th>\n",
       "      <td>1a9e8547-147a-48ac-865d-8e4ed01e488b</td>\n",
       "      <td>Antarctica (the territory South of 60 deg S)</td>\n",
       "      <td>attention</td>\n",
       "      <td>Export</td>\n",
       "      <td>2850</td>\n",
       "      <td>1689.76</td>\n",
       "      <td>25-07-2024</td>\n",
       "      <td>Furniture</td>\n",
       "      <td>New Charles</td>\n",
       "      <td>723949</td>\n",
       "      <td>2088.69</td>\n",
       "      <td>Land</td>\n",
       "      <td>Robinson-Kim</td>\n",
       "      <td>Laura Davis</td>\n",
       "      <td>7575689</td>\n",
       "      <td>Net 30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5100</th>\n",
       "      <td>70bf5a52-0322-4289-9896-28c54d8c5f7a</td>\n",
       "      <td>Japan</td>\n",
       "      <td>your</td>\n",
       "      <td>Export</td>\n",
       "      <td>1694</td>\n",
       "      <td>6157.46</td>\n",
       "      <td>22-10-2021</td>\n",
       "      <td>Toys</td>\n",
       "      <td>Christopherborough</td>\n",
       "      <td>449161</td>\n",
       "      <td>2789.85</td>\n",
       "      <td>Air</td>\n",
       "      <td>Smith, Petersen and Simon</td>\n",
       "      <td>Krista Russell</td>\n",
       "      <td>58389600</td>\n",
       "      <td>Net 60</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3001 rows Ã— 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                             Transaction_ID  \\\n",
       "708    439ddd74-67af-46d9-af04-ef81b5481bf2   \n",
       "6208   4bc8754f-28af-4080-8f40-0449d986ee5f   \n",
       "14618  c682238e-e006-4107-90d1-f50934b5cb58   \n",
       "12643  83cfb784-acbc-4987-995a-371b3d33c7a5   \n",
       "1073   ab6fc9e7-be72-4448-91b5-ab77d09e1abb   \n",
       "...                                     ...   \n",
       "12391  cce97f19-00cb-4e28-876f-4810a18fca7a   \n",
       "1856   00ac317a-dd82-4b3e-a868-5bdd02c81d11   \n",
       "10170  c34d6790-83f1-4c2c-a48b-9fcb9157d48c   \n",
       "579    1a9e8547-147a-48ac-865d-8e4ed01e488b   \n",
       "5100   70bf5a52-0322-4289-9896-28c54d8c5f7a   \n",
       "\n",
       "                                            Country     Product Import_Export  \\\n",
       "708                                          Jersey        then        Import   \n",
       "6208                                         Belize       about        Export   \n",
       "14618                                       Vietnam    consider        Import   \n",
       "12643                                      Barbados  successful        Export   \n",
       "1073                                     Madagascar       sound        Import   \n",
       "...                                             ...         ...           ...   \n",
       "12391                                      Dominica     nothing        Export   \n",
       "1856                                         Jordan     brother        Export   \n",
       "10170                                          Fiji       light        Import   \n",
       "579    Antarctica (the territory South of 60 deg S)   attention        Export   \n",
       "5100                                          Japan        your        Export   \n",
       "\n",
       "       Quantity    Value        Date     Category                Port  \\\n",
       "708        1755  7031.60  23-06-2021         Toys       North Kenneth   \n",
       "6208       8917  2112.46  28-09-2022    Furniture     Port Nicoleport   \n",
       "14618      6306  8424.55  19-10-2023    Furniture         Walkerville   \n",
       "12643      7615  2639.24  13-02-2021  Electronics        South Jeremy   \n",
       "1073       3663  6330.61  25-06-2023     Clothing       Weaverborough   \n",
       "...         ...      ...         ...          ...                 ...   \n",
       "12391      5364  8083.96  15-10-2021  Electronics            Fredland   \n",
       "1856       8688  1551.08  15-06-2022    Furniture      Cunninghamside   \n",
       "10170      7452  5362.06  11-04-2020    Machinery      Port Shaneside   \n",
       "579        2850  1689.76  25-07-2024    Furniture         New Charles   \n",
       "5100       1694  6157.46  22-10-2021         Toys  Christopherborough   \n",
       "\n",
       "       Customs_Code   Weight Shipping_Method                   Supplier  \\\n",
       "708          368605  3178.59             Sea               Thompson LLC   \n",
       "6208         152047  3438.64             Air                 Clarke LLC   \n",
       "14618        275391  3253.30             Air            Livingston-Rose   \n",
       "12643        807319  4836.54             Sea             Mullins-Holmes   \n",
       "1073         402750  1152.38             Air              Hensley-Garza   \n",
       "...             ...      ...             ...                        ...   \n",
       "12391        850161  4240.11             Sea         Barron-Christensen   \n",
       "1856         450005  2399.42             Sea                Lloyd-Scott   \n",
       "10170        503174  4601.47             Sea                 Cooper Inc   \n",
       "579          723949  2088.69            Land               Robinson-Kim   \n",
       "5100         449161  2789.85             Air  Smith, Petersen and Simon   \n",
       "\n",
       "              Customer  Invoice_Number Payment_Terms  \n",
       "708     Ashley Herrera        46772582        Net 60  \n",
       "6208      Darius Price        35375538        Net 30  \n",
       "14618  Jennifer Torres         8212653       Prepaid  \n",
       "12643      James Lopez        68860920       Prepaid  \n",
       "1073   Robert Robinson        59351741        Net 60  \n",
       "...                ...             ...           ...  \n",
       "12391    Shelia Hayden        95649856        Net 30  \n",
       "1856    Alexandra Best        75251941        Net 30  \n",
       "10170   Roger Santiago        45053376        Net 30  \n",
       "579        Laura Davis         7575689        Net 30  \n",
       "5100    Krista Russell        58389600        Net 60  \n",
       "\n",
       "[3001 rows x 16 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(hts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dc46cd33-a72a-49af-9e4a-6fd09849d6ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Transaction_ID',\n",
       " 'Country',\n",
       " 'Product',\n",
       " 'Import_Export',\n",
       " 'Quantity',\n",
       " 'Value',\n",
       " 'Date',\n",
       " 'Category',\n",
       " 'Port',\n",
       " 'Customs_Code',\n",
       " 'Weight',\n",
       " 'Shipping_Method',\n",
       " 'Supplier',\n",
       " 'Customer',\n",
       " 'Invoice_Number',\n",
       " 'Payment_Terms']"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_of_variables = hts.columns.tolist()\n",
    "list_of_variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d6fddd34-1857-4bf8-8955-d1f74f47cb17",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index Variables: ['Transaction_ID']\n",
      "Categorical Variables - Nominal Type: ['Country', 'Product', 'Import_Export', 'Category', 'Port', 'Shipping_Method', 'Supplier', 'Customer', 'Payment_Terms']\n",
      "Non-Categorical Variables: ['Quantity', 'Value', 'Date', 'Weight', 'Customs_Code', 'Invoice_Number']\n"
     ]
    }
   ],
   "source": [
    "# Identify & Display the List of the following Variables:\n",
    "\n",
    "# 1. Index Variables\n",
    "index_variables = ['Transaction_ID']\n",
    "print(\"Index Variables:\", index_variables)\n",
    "\n",
    "# 2. Categorical Variables - Nominal Type\n",
    "categorical_nominal_variables = ['Country', 'Product', 'Import_Export', 'Category', 'Port', 'Shipping_Method', 'Supplier', 'Customer', 'Payment_Terms']\n",
    "print(\"Categorical Variables - Nominal Type:\", categorical_nominal_variables)\n",
    "\n",
    "# 3. Non-Categorical Variables \n",
    "non_categorical_variables = ['Quantity', 'Value', 'Date', 'Weight', 'Customs_Code', 'Invoice_Number']\n",
    "print(\"Non-Categorical Variables:\", non_categorical_variables)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "bf87ece7-c76a-4404-b113-f5633aaad215",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Non-Categorical Subset:\n",
      "        Quantity    Value        Date   Weight  Customs_Code  Invoice_Number\n",
      "708        1755  7031.60  23-06-2021  3178.59        368605        46772582\n",
      "6208       8917  2112.46  28-09-2022  3438.64        152047        35375538\n",
      "14618      6306  8424.55  19-10-2023  3253.30        275391         8212653\n",
      "12643      7615  2639.24  13-02-2021  4836.54        807319        68860920\n",
      "1073       3663  6330.61  25-06-2023  1152.38        402750        59351741\n",
      "...         ...      ...         ...      ...           ...             ...\n",
      "12391      5364  8083.96  15-10-2021  4240.11        850161        95649856\n",
      "1856       8688  1551.08  15-06-2022  2399.42        450005        75251941\n",
      "10170      7452  5362.06  11-04-2020  4601.47        503174        45053376\n",
      "579        2850  1689.76  25-07-2024  2088.69        723949         7575689\n",
      "5100       1694  6157.46  22-10-2021  2789.85        449161        58389600\n",
      "\n",
      "[3001 rows x 6 columns]\n"
     ]
    }
   ],
   "source": [
    "# Subset and Display the Non-Categorical Variables\n",
    "non_categorical_subset = hts[non_categorical_variables]\n",
    "print(\"Non-Categorical Subset:\\n\", non_categorical_subset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "95787822-791b-4333-a858-fa3bca2618fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Quantity</th>\n",
       "      <th>Value</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Customs_Code</th>\n",
       "      <th>Invoice_Number</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3001.000000</td>\n",
       "      <td>3001.000000</td>\n",
       "      <td>3001.000000</td>\n",
       "      <td>3001.000000</td>\n",
       "      <td>3.001000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4941.541153</td>\n",
       "      <td>5006.289250</td>\n",
       "      <td>2508.719853</td>\n",
       "      <td>544677.655448</td>\n",
       "      <td>5.020215e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2888.923525</td>\n",
       "      <td>2847.783411</td>\n",
       "      <td>1456.759487</td>\n",
       "      <td>257325.886760</td>\n",
       "      <td>2.866435e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>103.030000</td>\n",
       "      <td>6.480000</td>\n",
       "      <td>100452.000000</td>\n",
       "      <td>4.795400e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2431.000000</td>\n",
       "      <td>2547.510000</td>\n",
       "      <td>1242.030000</td>\n",
       "      <td>329709.000000</td>\n",
       "      <td>2.523509e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4936.000000</td>\n",
       "      <td>5052.050000</td>\n",
       "      <td>2525.230000</td>\n",
       "      <td>536662.000000</td>\n",
       "      <td>4.968066e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7438.000000</td>\n",
       "      <td>7430.270000</td>\n",
       "      <td>3789.490000</td>\n",
       "      <td>767885.000000</td>\n",
       "      <td>7.525194e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>10000.000000</td>\n",
       "      <td>9999.130000</td>\n",
       "      <td>4996.290000</td>\n",
       "      <td>999543.000000</td>\n",
       "      <td>9.999799e+07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Quantity        Value       Weight   Customs_Code  Invoice_Number\n",
       "count   3001.000000  3001.000000  3001.000000    3001.000000    3.001000e+03\n",
       "mean    4941.541153  5006.289250  2508.719853  544677.655448    5.020215e+07\n",
       "std     2888.923525  2847.783411  1456.759487  257325.886760    2.866435e+07\n",
       "min        5.000000   103.030000     6.480000  100452.000000    4.795400e+04\n",
       "25%     2431.000000  2547.510000  1242.030000  329709.000000    2.523509e+07\n",
       "50%     4936.000000  5052.050000  2525.230000  536662.000000    4.968066e+07\n",
       "75%     7438.000000  7430.270000  3789.490000  767885.000000    7.525194e+07\n",
       "max    10000.000000  9999.130000  4996.290000  999543.000000    9.999799e+07"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Display the Descriptive Statistics of the Non-Categorical Subset\n",
    "non_categorical_stats = non_categorical_subset.describe()\n",
    "non_categorical_subset.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e892074e-bdae-49df-bb1e-7321aa2043b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Categorical Subset:\n",
      "                                             Country Import_Export     Product  \\\n",
      "708                                          Jersey        Import        then   \n",
      "6208                                         Belize        Export       about   \n",
      "14618                                       Vietnam        Import    consider   \n",
      "12643                                      Barbados        Export  successful   \n",
      "1073                                     Madagascar        Import       sound   \n",
      "...                                             ...           ...         ...   \n",
      "12391                                      Dominica        Export     nothing   \n",
      "1856                                         Jordan        Export     brother   \n",
      "10170                                          Fiji        Import       light   \n",
      "579    Antarctica (the territory South of 60 deg S)        Export   attention   \n",
      "5100                                          Japan        Export        your   \n",
      "\n",
      "          Category                Port Shipping_Method  \\\n",
      "708           Toys       North Kenneth             Sea   \n",
      "6208     Furniture     Port Nicoleport             Air   \n",
      "14618    Furniture         Walkerville             Air   \n",
      "12643  Electronics        South Jeremy             Sea   \n",
      "1073      Clothing       Weaverborough             Air   \n",
      "...            ...                 ...             ...   \n",
      "12391  Electronics            Fredland             Sea   \n",
      "1856     Furniture      Cunninghamside             Sea   \n",
      "10170    Machinery      Port Shaneside             Sea   \n",
      "579      Furniture         New Charles            Land   \n",
      "5100          Toys  Christopherborough             Air   \n",
      "\n",
      "                        Supplier         Customer Payment_Terms  \n",
      "708                 Thompson LLC   Ashley Herrera        Net 60  \n",
      "6208                  Clarke LLC     Darius Price        Net 30  \n",
      "14618            Livingston-Rose  Jennifer Torres       Prepaid  \n",
      "12643             Mullins-Holmes      James Lopez       Prepaid  \n",
      "1073               Hensley-Garza  Robert Robinson        Net 60  \n",
      "...                          ...              ...           ...  \n",
      "12391         Barron-Christensen    Shelia Hayden        Net 30  \n",
      "1856                 Lloyd-Scott   Alexandra Best        Net 30  \n",
      "10170                 Cooper Inc   Roger Santiago        Net 30  \n",
      "579                 Robinson-Kim      Laura Davis        Net 30  \n",
      "5100   Smith, Petersen and Simon   Krista Russell        Net 60  \n",
      "\n",
      "[3001 rows x 9 columns]\n"
     ]
    }
   ],
   "source": [
    "# Subset and Display the Categorical Variables\n",
    "categorical_subset = hts[categorical_nominal_variables]\n",
    "print(\"Categorical Subset:\\n\", categorical_subset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "597d2cb6-85ab-4b3e-aa38-1a592b4ccb96",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-10-06 22:20:12.058 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\tanus\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n"
     ]
    },
    {
     "ename": "MemoryError",
     "evalue": "Unable to allocate 1.19 GiB for an array with shape (10657, 15000) and data type int64",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mMemoryError\u001b[0m                               Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[29], line 74\u001b[0m\n\u001b[0;32m     71\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m cramers_v_matrix\n\u001b[0;32m     73\u001b[0m \u001b[38;5;66;03m# Compute Cramer's V matrix\u001b[39;00m\n\u001b[1;32m---> 74\u001b[0m cramers_v_matrix \u001b[38;5;241m=\u001b[39m compute_cramers_v_matrix(hts)\n\u001b[0;32m     76\u001b[0m \u001b[38;5;66;03m# Plot Heatmap\u001b[39;00m\n\u001b[0;32m     77\u001b[0m fig3, ax3 \u001b[38;5;241m=\u001b[39m plt\u001b[38;5;241m.\u001b[39msubplots(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m10\u001b[39m, \u001b[38;5;241m8\u001b[39m))\n",
      "Cell \u001b[1;32mIn[29], line 70\u001b[0m, in \u001b[0;36mcompute_cramers_v_matrix\u001b[1;34m(df)\u001b[0m\n\u001b[0;32m     68\u001b[0m             cramers_v_matrix\u001b[38;5;241m.\u001b[39mloc[col1, col2] \u001b[38;5;241m=\u001b[39m cramers_v_matrix\u001b[38;5;241m.\u001b[39mloc[col2, col1]\n\u001b[0;32m     69\u001b[0m         \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m---> 70\u001b[0m             cramers_v_matrix\u001b[38;5;241m.\u001b[39mloc[col1, col2] \u001b[38;5;241m=\u001b[39m cramers_v(df[col1], df[col2])\n\u001b[0;32m     71\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m cramers_v_matrix\n",
      "Cell \u001b[1;32mIn[29], line 45\u001b[0m, in \u001b[0;36mcramers_v\u001b[1;34m(x, y)\u001b[0m\n\u001b[0;32m     43\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mcramers_v\u001b[39m(x, y):\n\u001b[0;32m     44\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Calculate Cramer's V statistic for categorical-categorical association.\"\"\"\u001b[39;00m\n\u001b[1;32m---> 45\u001b[0m     confusion_matrix \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mcrosstab(x, y)\n\u001b[0;32m     46\u001b[0m     chi2 \u001b[38;5;241m=\u001b[39m stats\u001b[38;5;241m.\u001b[39mchi2_contingency(confusion_matrix)[\u001b[38;5;241m0\u001b[39m]\n\u001b[0;32m     47\u001b[0m     n \u001b[38;5;241m=\u001b[39m confusion_matrix\u001b[38;5;241m.\u001b[39msum()\u001b[38;5;241m.\u001b[39msum()\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\reshape\\pivot.py:728\u001b[0m, in \u001b[0;36mcrosstab\u001b[1;34m(index, columns, values, rownames, colnames, aggfunc, margins, margins_name, dropna, normalize)\u001b[0m\n\u001b[0;32m    724\u001b[0m     kwargs \u001b[38;5;241m=\u001b[39m {\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124maggfunc\u001b[39m\u001b[38;5;124m\"\u001b[39m: aggfunc}\n\u001b[0;32m    726\u001b[0m \u001b[38;5;66;03m# error: Argument 7 to \"pivot_table\" of \"DataFrame\" has incompatible type\u001b[39;00m\n\u001b[0;32m    727\u001b[0m \u001b[38;5;66;03m# \"**Dict[str, object]\"; expected \"Union[...]\"\u001b[39;00m\n\u001b[1;32m--> 728\u001b[0m table \u001b[38;5;241m=\u001b[39m df\u001b[38;5;241m.\u001b[39mpivot_table(\n\u001b[0;32m    729\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m__dummy__\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    730\u001b[0m     index\u001b[38;5;241m=\u001b[39munique_rownames,\n\u001b[0;32m    731\u001b[0m     columns\u001b[38;5;241m=\u001b[39munique_colnames,\n\u001b[0;32m    732\u001b[0m     margins\u001b[38;5;241m=\u001b[39mmargins,\n\u001b[0;32m    733\u001b[0m     margins_name\u001b[38;5;241m=\u001b[39mmargins_name,\n\u001b[0;32m    734\u001b[0m     dropna\u001b[38;5;241m=\u001b[39mdropna,\n\u001b[0;32m    735\u001b[0m     observed\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[0;32m    736\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,  \u001b[38;5;66;03m# type: ignore[arg-type]\u001b[39;00m\n\u001b[0;32m    737\u001b[0m )\n\u001b[0;32m    739\u001b[0m \u001b[38;5;66;03m# Post-process\u001b[39;00m\n\u001b[0;32m    740\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m normalize \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mFalse\u001b[39;00m:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py:9509\u001b[0m, in \u001b[0;36mDataFrame.pivot_table\u001b[1;34m(self, values, index, columns, aggfunc, fill_value, margins, dropna, margins_name, observed, sort)\u001b[0m\n\u001b[0;32m   9492\u001b[0m \u001b[38;5;129m@Substitution\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m   9493\u001b[0m \u001b[38;5;129m@Appender\u001b[39m(_shared_docs[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpivot_table\u001b[39m\u001b[38;5;124m\"\u001b[39m])\n\u001b[0;32m   9494\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mpivot_table\u001b[39m(\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   9505\u001b[0m     sort: \u001b[38;5;28mbool\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m,\n\u001b[0;32m   9506\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m DataFrame:\n\u001b[0;32m   9507\u001b[0m     \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mcore\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mreshape\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpivot\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m pivot_table\n\u001b[1;32m-> 9509\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m pivot_table(\n\u001b[0;32m   9510\u001b[0m         \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m   9511\u001b[0m         values\u001b[38;5;241m=\u001b[39mvalues,\n\u001b[0;32m   9512\u001b[0m         index\u001b[38;5;241m=\u001b[39mindex,\n\u001b[0;32m   9513\u001b[0m         columns\u001b[38;5;241m=\u001b[39mcolumns,\n\u001b[0;32m   9514\u001b[0m         aggfunc\u001b[38;5;241m=\u001b[39maggfunc,\n\u001b[0;32m   9515\u001b[0m         fill_value\u001b[38;5;241m=\u001b[39mfill_value,\n\u001b[0;32m   9516\u001b[0m         margins\u001b[38;5;241m=\u001b[39mmargins,\n\u001b[0;32m   9517\u001b[0m         dropna\u001b[38;5;241m=\u001b[39mdropna,\n\u001b[0;32m   9518\u001b[0m         margins_name\u001b[38;5;241m=\u001b[39mmargins_name,\n\u001b[0;32m   9519\u001b[0m         observed\u001b[38;5;241m=\u001b[39mobserved,\n\u001b[0;32m   9520\u001b[0m         sort\u001b[38;5;241m=\u001b[39msort,\n\u001b[0;32m   9521\u001b[0m     )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\reshape\\pivot.py:102\u001b[0m, in \u001b[0;36mpivot_table\u001b[1;34m(data, values, index, columns, aggfunc, fill_value, margins, dropna, margins_name, observed, sort)\u001b[0m\n\u001b[0;32m     99\u001b[0m     table \u001b[38;5;241m=\u001b[39m concat(pieces, keys\u001b[38;5;241m=\u001b[39mkeys, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n\u001b[0;32m    100\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m table\u001b[38;5;241m.\u001b[39m__finalize__(data, method\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpivot_table\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m--> 102\u001b[0m table \u001b[38;5;241m=\u001b[39m __internal_pivot_table(\n\u001b[0;32m    103\u001b[0m     data,\n\u001b[0;32m    104\u001b[0m     values,\n\u001b[0;32m    105\u001b[0m     index,\n\u001b[0;32m    106\u001b[0m     columns,\n\u001b[0;32m    107\u001b[0m     aggfunc,\n\u001b[0;32m    108\u001b[0m     fill_value,\n\u001b[0;32m    109\u001b[0m     margins,\n\u001b[0;32m    110\u001b[0m     dropna,\n\u001b[0;32m    111\u001b[0m     margins_name,\n\u001b[0;32m    112\u001b[0m     observed,\n\u001b[0;32m    113\u001b[0m     sort,\n\u001b[0;32m    114\u001b[0m )\n\u001b[0;32m    115\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m table\u001b[38;5;241m.\u001b[39m__finalize__(data, method\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpivot_table\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\reshape\\pivot.py:219\u001b[0m, in \u001b[0;36m__internal_pivot_table\u001b[1;34m(data, values, index, columns, aggfunc, fill_value, margins, dropna, margins_name, observed, sort)\u001b[0m\n\u001b[0;32m    216\u001b[0m         table \u001b[38;5;241m=\u001b[39m table\u001b[38;5;241m.\u001b[39mreindex(m, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m, fill_value\u001b[38;5;241m=\u001b[39mfill_value)\n\u001b[0;32m    218\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m sort \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mTrue\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(table, ABCDataFrame):\n\u001b[1;32m--> 219\u001b[0m     table \u001b[38;5;241m=\u001b[39m table\u001b[38;5;241m.\u001b[39msort_index(axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n\u001b[0;32m    221\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m fill_value \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m    222\u001b[0m     table \u001b[38;5;241m=\u001b[39m table\u001b[38;5;241m.\u001b[39mfillna(fill_value)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py:7379\u001b[0m, in \u001b[0;36mDataFrame.sort_index\u001b[1;34m(self, axis, level, ascending, inplace, kind, na_position, sort_remaining, ignore_index, key)\u001b[0m\n\u001b[0;32m   7282\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msort_index\u001b[39m(\n\u001b[0;32m   7283\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m   7284\u001b[0m     \u001b[38;5;241m*\u001b[39m,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   7293\u001b[0m     key: IndexKeyFunc \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m   7294\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m DataFrame \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m   7295\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m   7296\u001b[0m \u001b[38;5;124;03m    Sort object by labels (along an axis).\u001b[39;00m\n\u001b[0;32m   7297\u001b[0m \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   7377\u001b[0m \u001b[38;5;124;03m    d  4\u001b[39;00m\n\u001b[0;32m   7378\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m-> 7379\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39msort_index(\n\u001b[0;32m   7380\u001b[0m         axis\u001b[38;5;241m=\u001b[39maxis,\n\u001b[0;32m   7381\u001b[0m         level\u001b[38;5;241m=\u001b[39mlevel,\n\u001b[0;32m   7382\u001b[0m         ascending\u001b[38;5;241m=\u001b[39mascending,\n\u001b[0;32m   7383\u001b[0m         inplace\u001b[38;5;241m=\u001b[39minplace,\n\u001b[0;32m   7384\u001b[0m         kind\u001b[38;5;241m=\u001b[39mkind,\n\u001b[0;32m   7385\u001b[0m         na_position\u001b[38;5;241m=\u001b[39mna_position,\n\u001b[0;32m   7386\u001b[0m         sort_remaining\u001b[38;5;241m=\u001b[39msort_remaining,\n\u001b[0;32m   7387\u001b[0m         ignore_index\u001b[38;5;241m=\u001b[39mignore_index,\n\u001b[0;32m   7388\u001b[0m         key\u001b[38;5;241m=\u001b[39mkey,\n\u001b[0;32m   7389\u001b[0m     )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py:5317\u001b[0m, in \u001b[0;36mNDFrame.sort_index\u001b[1;34m(self, axis, level, ascending, inplace, kind, na_position, sort_remaining, ignore_index, key)\u001b[0m\n\u001b[0;32m   5315\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\n\u001b[0;32m   5316\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m-> 5317\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcopy(deep\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m)\n\u001b[0;32m   5319\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ignore_index:\n\u001b[0;32m   5320\u001b[0m     result\u001b[38;5;241m.\u001b[39mindex \u001b[38;5;241m=\u001b[39m default_index(\u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m))\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py:6811\u001b[0m, in \u001b[0;36mNDFrame.copy\u001b[1;34m(self, deep)\u001b[0m\n\u001b[0;32m   6662\u001b[0m \u001b[38;5;129m@final\u001b[39m\n\u001b[0;32m   6663\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mcopy\u001b[39m(\u001b[38;5;28mself\u001b[39m, deep: bool_t \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Self:\n\u001b[0;32m   6664\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m   6665\u001b[0m \u001b[38;5;124;03m    Make a copy of this object's indices and data.\u001b[39;00m\n\u001b[0;32m   6666\u001b[0m \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   6809\u001b[0m \u001b[38;5;124;03m    dtype: int64\u001b[39;00m\n\u001b[0;32m   6810\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m-> 6811\u001b[0m     data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_mgr\u001b[38;5;241m.\u001b[39mcopy(deep\u001b[38;5;241m=\u001b[39mdeep)\n\u001b[0;32m   6812\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_clear_item_cache()\n\u001b[0;32m   6813\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_constructor_from_mgr(data, axes\u001b[38;5;241m=\u001b[39mdata\u001b[38;5;241m.\u001b[39maxes)\u001b[38;5;241m.\u001b[39m__finalize__(\n\u001b[0;32m   6814\u001b[0m         \u001b[38;5;28mself\u001b[39m, method\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcopy\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   6815\u001b[0m     )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\internals\\managers.py:593\u001b[0m, in \u001b[0;36mBaseBlockManager.copy\u001b[1;34m(self, deep)\u001b[0m\n\u001b[0;32m    590\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    591\u001b[0m         new_axes \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39maxes)\n\u001b[1;32m--> 593\u001b[0m res \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mapply(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcopy\u001b[39m\u001b[38;5;124m\"\u001b[39m, deep\u001b[38;5;241m=\u001b[39mdeep)\n\u001b[0;32m    594\u001b[0m res\u001b[38;5;241m.\u001b[39maxes \u001b[38;5;241m=\u001b[39m new_axes\n\u001b[0;32m    596\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m    597\u001b[0m     \u001b[38;5;66;03m# Avoid needing to re-compute these\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\internals\\managers.py:363\u001b[0m, in \u001b[0;36mBaseBlockManager.apply\u001b[1;34m(self, f, align_keys, **kwargs)\u001b[0m\n\u001b[0;32m    361\u001b[0m         applied \u001b[38;5;241m=\u001b[39m b\u001b[38;5;241m.\u001b[39mapply(f, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    362\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 363\u001b[0m         applied \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mgetattr\u001b[39m(b, f)(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    364\u001b[0m     result_blocks \u001b[38;5;241m=\u001b[39m extend_blocks(applied, result_blocks)\n\u001b[0;32m    366\u001b[0m out \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mtype\u001b[39m(\u001b[38;5;28mself\u001b[39m)\u001b[38;5;241m.\u001b[39mfrom_blocks(result_blocks, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39maxes)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py:796\u001b[0m, in \u001b[0;36mBlock.copy\u001b[1;34m(self, deep)\u001b[0m\n\u001b[0;32m    794\u001b[0m refs: BlockValuesRefs \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m    795\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m deep:\n\u001b[1;32m--> 796\u001b[0m     values \u001b[38;5;241m=\u001b[39m values\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m    797\u001b[0m     refs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m    798\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "\u001b[1;31mMemoryError\u001b[0m: Unable to allocate 1.19 GiB for an array with shape (10657, 15000) and data type int64"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import streamlit as st\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from scipy import stats\n",
    "\n",
    "# Load Data\n",
    "hts = pd.read_csv(r\"C:\\FORE\\Term 1\\Imports_Exports_Dataset.csv\")  # Adjust the path accordingly\n",
    "\n",
    "# Clean Column Names\n",
    "hts.columns = hts.columns.str.strip()\n",
    "\n",
    "# Ensure 'Category_Encoded' exists\n",
    "if 'Category_Encoded' not in hts.columns:\n",
    "    le = LabelEncoder()\n",
    "    hts['Category_Encoded'] = le.fit_transform(hts['Category'])\n",
    "\n",
    "# Streamlit App\n",
    "st.title(\"Data Visualization Dashboard\")\n",
    "\n",
    "# 1. Pie Chart for 'Import_Export'\n",
    "st.subheader(\"Proportion of Import vs Export\")\n",
    "import_export_counts = hts['Import_Export'].value_counts()\n",
    "fig1, ax1 = plt.subplots()\n",
    "ax1.pie(import_export_counts, labels=import_export_counts.index, autopct='%1.1f%%', colors=sns.color_palette('viridis'))\n",
    "ax1.set_title('Proportion of Import vs Export')\n",
    "st.pyplot(fig1)\n",
    "\n",
    "# 2. Histogram for 'Category_Encoded'\n",
    "st.subheader(\"Histogram of Category Encoded\")\n",
    "fig2, ax2 = plt.subplots()\n",
    "sns.histplot(hts['Category_Encoded'], bins=5, kde=False, color='skyblue', ax=ax2)\n",
    "ax2.set_title('Histogram of Category Encoded')\n",
    "ax2.set_xlabel('Category Encoded')\n",
    "ax2.set_ylabel('Frequency')\n",
    "st.pyplot(fig2)\n",
    "\n",
    "# 3. Cramer's V Heatmap\n",
    "st.subheader(\"Cramer's V Correlation Heatmap\")\n",
    "\n",
    "def cramers_v(x, y):\n",
    "    \"\"\"Calculate Cramer's V statistic for categorical-categorical association.\"\"\"\n",
    "    confusion_matrix = pd.crosstab(x, y)\n",
    "    chi2 = stats.chi2_contingency(confusion_matrix)[0]\n",
    "    n = confusion_matrix.sum().sum()\n",
    "    if n == 0:  # Handle potential division by zero\n",
    "        return 0\n",
    "    phi2 = chi2 / n\n",
    "    r, k = confusion_matrix.shape\n",
    "    phi2corr = max(0, phi2 - ((k-1)*(r-1))/(n-1))\n",
    "    rcorr = r - ((r-1)**2)/(n-1)\n",
    "    kcorr = k - ((k-1)**2)/(n-1)\n",
    "    return np.sqrt(phi2corr / min((kcorr-1), (rcorr-1))) if min((kcorr-1), (rcorr-1)) > 0 else 0\n",
    "\n",
    "def compute_cramers_v_matrix(df):\n",
    "    \"\"\"Compute Cramer's V matrix for all pairs of categorical variables in the DataFrame.\"\"\"\n",
    "    categorical_columns = df.select_dtypes(include=['object']).columns\n",
    "    n = len(categorical_columns)\n",
    "    cramers_v_matrix = pd.DataFrame(np.zeros((n, n)), columns=categorical_columns, index=categorical_columns)\n",
    "    \n",
    "    for i, col1 in enumerate(categorical_columns):\n",
    "        for j, col2 in enumerate(categorical_columns):\n",
    "            if i == j:\n",
    "                cramers_v_matrix.loc[col1, col2] = 1.0\n",
    "            elif j < i:\n",
    "                cramers_v_matrix.loc[col1, col2] = cramers_v_matrix.loc[col2, col1]\n",
    "            else:\n",
    "                cramers_v_matrix.loc[col1, col2] = cramers_v(df[col1], df[col2])\n",
    "    return cramers_v_matrix\n",
    "\n",
    "# Compute Cramer's V matrix\n",
    "cramers_v_matrix = compute_cramers_v_matrix(hts)\n",
    "\n",
    "# Plot Heatmap\n",
    "fig3, ax3 = plt.subplots(figsize=(10, 8))\n",
    "sns.heatmap(cramers_v_matrix, annot=True, cmap='coolwarm', vmin=0, vmax=1, ax=ax3)\n",
    "ax3.set_title(\"Cramer's V Correlation Heatmap\")\n",
    "st.pyplot(fig3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "75e7a254-88e1-403a-b88c-c8ddde5fee13",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
